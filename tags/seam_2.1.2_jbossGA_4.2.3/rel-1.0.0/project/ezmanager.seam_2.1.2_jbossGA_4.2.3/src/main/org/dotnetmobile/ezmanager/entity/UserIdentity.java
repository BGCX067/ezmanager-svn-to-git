/*  <EzManager: Web application for activities follow up. As main features, you can create projects, then associate tasks and calculate their corresponding invoices. Each project is associated to one or more customers identified by their addressee>
    Copyright (C) <2010>  <Michel Petrovic> <email: dotnetmobile@gmail.com>

    Contributor(s): _____________________.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package org.dotnetmobile.ezmanager.entity;

// Generated Apr 15, 2010 7:01:47 PM by Hibernate Tools 3.2.5.Beta

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import org.hibernate.validator.Length;
import org.hibernate.validator.NotNull;
import org.jboss.seam.annotations.Logger;
import org.jboss.seam.log.Log;

/**
 * UserIdentity generated by hbm2java
 */
@Entity
@Table(name = "USER_IDENTITY", schema = "EZMANAGER")
public class UserIdentity implements java.io.Serializable {

	@Logger private Log log;
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 9137655582283953213L;
	
	private long userIdentityId;
	private String name;
	private String password;
	private char isActive;
	private Set<RoleIdentity> roleIdentities = new HashSet<RoleIdentity>(0);
	private Set<ExecutedTask> executedTasks = new HashSet<ExecutedTask>(0);
	private Set<Task> tasks = new HashSet<Task>(0);

	public UserIdentity() {
	}

	public UserIdentity(long userIdentityId, String name, String password,
			char isActive) {
		this.userIdentityId = userIdentityId;
		this.name = name;
		this.password = password;
		this.isActive = isActive;
	}

	public UserIdentity(long userIdentityId, String name, String password,
			char isActive, Set<RoleIdentity> roleIdentities,
			Set<ExecutedTask> executedTasks, Set<Task> tasks) {
		this.userIdentityId = userIdentityId;
		this.name = name;
		this.password = password;
		this.isActive = isActive;
		this.roleIdentities = roleIdentities;
		this.executedTasks = executedTasks;
		this.tasks = tasks;
	}

	@Id
	@Column(name = "USER_IDENTITY_ID", unique = true, nullable = false, precision = 10, scale = 0)
	public long getUserIdentityId() {
		return this.userIdentityId;
	}

	public void setUserIdentityId(long userIdentityId) {
		this.userIdentityId = userIdentityId;
	}

	@Column(name = "NAME", nullable = false, length = 50)
	@NotNull
	@Length(max = 50)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "PASSWORD", nullable = false, length = 50)
	@NotNull
	@Length(max = 50)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "IS_ACTIVE", nullable = false, length = 1)
	public char getIsActive() {
		return this.isActive;
	}

	public void setIsActive(char isActive) {
		this.isActive = isActive;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "USER_ROLE", schema = "EZMANAGER", joinColumns = { @JoinColumn(name = "USER_IDENTITY_USER_IDENTITY_ID", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "ROLE_IDENTITY_ROLE_IDENTITY_ID", nullable = false, updatable = false) })
	public Set<RoleIdentity> getRoleIdentities() {
		return this.roleIdentities;
	}

	public void setRoleIdentities(Set<RoleIdentity> roleIdentities) {
		this.roleIdentities = roleIdentities;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userIdentity")
	public Set<ExecutedTask> getExecutedTasks() {
		return this.executedTasks;
	}

	public void setExecutedTasks(Set<ExecutedTask> executedTasks) {
		this.executedTasks = executedTasks;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "USER_TASK", schema = "EZMANAGER", joinColumns = { @JoinColumn(name = "USER_IDENTITY_USER_IDENTITY_ID", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "TASK_TASK_ID", nullable = false, updatable = false) })
	public Set<Task> getTasks() {
		return this.tasks;
	}

	public void setTasks(Set<Task> tasks) {
		this.tasks = tasks;
	}

}
