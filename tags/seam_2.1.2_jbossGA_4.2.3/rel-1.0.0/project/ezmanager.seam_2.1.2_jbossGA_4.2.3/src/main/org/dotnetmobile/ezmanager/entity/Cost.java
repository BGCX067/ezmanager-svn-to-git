/*  <EzManager: Web application for activities follow up. As main features, you can create projects, then associate tasks and calculate their corresponding invoices. Each project is associated to one or more customers identified by their addressee>
    Copyright (C) <2010>  <Michel Petrovic> <email: dotnetmobile@gmail.com>

    Contributor(s): _____________________.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package org.dotnetmobile.ezmanager.entity;

// Generated Jan 3, 2010 6:01:01 PM by Hibernate Tools 3.2.5.Beta

import java.math.BigDecimal;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import org.hibernate.validator.Length;
import org.hibernate.validator.NotNull;
import org.jboss.seam.annotations.Logger;
import org.jboss.seam.log.Log;


/**
 * Cost generated by hbm2java
 */
@Entity
@Table(name = "COST", schema = "EZMANAGER")
public class Cost implements java.io.Serializable {

	@Logger private Log log;
	
	/**
	 * 
	 */
	private static final long serialVersionUID = -7936652878732820304L;
	
	private long costId;
	private Task task;
	private BaseVat baseVat;
	private String name;
	private BigDecimal amountProposed;
	private BigDecimal totalHours;

	public Cost() {
	}

	public Cost(long costId, Task task, BaseVat baseVat) {
		this.costId = costId;
		this.task = task;
		this.baseVat = baseVat;
	}

	public Cost(long costId, Task task, BaseVat baseVat, String name,
			BigDecimal amountProposed, BigDecimal totalHours) {
		this.costId = costId;
		this.task = task;
		this.baseVat = baseVat;
		this.name = name;
		this.amountProposed = amountProposed;
		this.totalHours = totalHours;
	}

	@Id
	@GeneratedValue(generator = "seqCost")
	@SequenceGenerator(name="seqCost", sequenceName = "SEQ_COST")
	@Column(name = "COST_ID", unique = true, nullable = false, precision = 10, scale = 0)
	public long getCostId() {
		return this.costId;
	}

	public void setCostId(long costId) {
		this.costId = costId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "TASK_ID", nullable = false)
	@NotNull
	public Task getTask() {
		return this.task;
	}

	public void setTask(Task task) {
		this.task = task;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "VAT_ID", nullable = false)
	@NotNull
	public BaseVat getBaseVat() {
		return this.baseVat;
	}

	public void setBaseVat(BaseVat baseVat) {
		this.baseVat = baseVat;
	}

	@Column(name = "NAME", length = 100)
	@Length(max = 100)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "AMOUNT_PROPOSED", precision = 11)
	public BigDecimal getAmountProposed() {
		return this.amountProposed;
	}

	public void setAmountProposed(BigDecimal amountProposed) {
		this.amountProposed = amountProposed;
	}

	@Column(name = "TOTAL_HOURS", precision = 8)
	public BigDecimal getTotalHours() {
		return this.totalHours;
	}

	public void setTotalHours(BigDecimal totalHours) {
		this.totalHours = totalHours;
	}

}
